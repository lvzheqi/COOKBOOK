package de.hs.inform.lyuz.cookbook.gui;

import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import javax.swing.event.ChangeEvent;
import de.hs.inform.lyuz.cookbook.controller.parser.FileParser;
import de.hs.inform.lyuz.cookbook.model.ExportInfo;
import de.hs.inform.lyuz.cookbook.model.MyBook;
import de.hs.inform.lyuz.cookbook.model.exception.ConvertErrorException;
import de.hs.inform.lyuz.cookbook.model.exception.ParserErrorExcepetion;
import de.hs.inform.lyuz.cookbook.model.exception.SystemErrorException;


public class CookMainJFrame extends javax.swing.JFrame {

    private ImportPanel importPanel;
    private CategoryPanel categoryPanel;
    private ExportPanel exportPanel;

    private int previousTabIndex;

    private FileParser fileParser = null;
    private MyBook myBook;

    public CookMainJFrame() {

        try {
            fileParser = new FileParser();
            myBook = fileParser.getMyBook();
        } catch (SystemErrorException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Fehler", JOptionPane.ERROR_MESSAGE);
            System.exit(1);
        }

        initComponents();
        init();

        setLocationRelativeTo(null);
    }

    private void init() {
        this.setTitle("Goes Epub");
        this.setResizable(false);
        importPanel = new ImportPanel(this);
        categoryPanel = new CategoryPanel(this);
        exportPanel = new ExportPanel(this);
        cookTabPane.addTab("Importieren", importPanel);
        cookTabPane.addTab("Kategorien", categoryPanel);
        cookTabPane.addTab("Exportieren", exportPanel);

        previousTabIndex = cookTabPane.getSelectedIndex();

        cookTabPane.addChangeListener(
                (ChangeEvent e) -> {

                    MyPanel myPanel = (MyPanel) cookTabPane.getComponentAt(previousTabIndex);
                    this.myBook = myPanel.getMyBook();

                    JTabbedPane tabbedPane = (JTabbedPane) e.getSource();
                    int selectedIndex = tabbedPane.getSelectedIndex();
                    switch (selectedIndex) {
                        case 0:
                            importPanel.update(this);
                            previousTabIndex = 0;
                            break;
                        case 1:

                            if (!fileParser.getMyBook().getFiles().isEmpty() && ImportPanel.action) {
                                JOptionPane.showMessageDialog(null, "Die Kategorien werden wieder importiert", "Warnung", JOptionPane.WARNING_MESSAGE);
                            }
                            if (ImportPanel.action) {
                                try {
                                    fileParser.reloadFiles(importPanel.getFiles());
                                } catch (ParserErrorExcepetion | ConvertErrorException ex) {
                                    JOptionPane.showMessageDialog(null, ex.getMessage(), "Fehler", JOptionPane.ERROR_MESSAGE);
                                } finally {
                                    ExportInfo exportInfo = myBook.getExportInfo();
                                    myBook = fileParser.getMyBook();
                                    myBook.setExportInfo(exportInfo);
                                    ImportPanel.action = false;
                                }
                            }
                            categoryPanel.update(this);
                            previousTabIndex = 1;
                            break;
                        case 2:
                            exportPanel.update(this);
                            previousTabIndex = 2;
                            break;
                    }
                }
        );

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        cookTabPane = new javax.swing.JTabbedPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(cookTabPane, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(cookTabPane, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    public ImportPanel getImportPanel() {
        return importPanel;
    }

    public void setImportPanel(ImportPanel importPanel) {
        this.importPanel = importPanel;
    }

    public CategoryPanel getCategoryPanel() {
        return categoryPanel;
    }

    public void setCategoryPanel(CategoryPanel categoryPanel) {
        this.categoryPanel = categoryPanel;
    }

    public ExportPanel getExportPanel() {
        return exportPanel;
    }

    public void setExportPanel(ExportPanel exportPanel) {
        this.exportPanel = exportPanel;
    }

    public JTabbedPane getCookTabPane() {
        return cookTabPane;
    }

    public void setCookTabPane(JTabbedPane cookTabPane) {
        this.cookTabPane = cookTabPane;
    }

    public MyBook getMyBook() {
        return myBook;
    }

    public void setMyBook(MyBook myBook) {
        this.myBook = myBook;
    }

    // Variables declaration - do not modify                     
    private javax.swing.JTabbedPane cookTabPane;
    // End of variables declaration                   
}
